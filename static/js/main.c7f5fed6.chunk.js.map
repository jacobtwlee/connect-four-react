{"version":3,"sources":["constants.js","components/Board.js","components/Dropzone.js","components/Button.js","utils.js","components/ConnectFour.js","components/App.js","serviceWorker.js","index.js"],"names":["EMPTY_COLUMNS","Array","fill","PLAYER_COLORS","_PLAYER_COLORS","Object","defineProperty","Grid","styled","div","_templateObject","BoardGridItem","_templateObject2","p","row","col","HighlightedGridItem","_templateObject3","TokenGridItem","_templateObject4","playerColor","Board","_ref3","columns","highlightedCells","react_default","a","createElement","map","rowIndex","_","colIndex","key","concat","player","renderTokenGridItems","_ref","_ref2","slicedToArray","renderHighlightedGridItems","Columns","Dropzone_templateObject","Column","button","Dropzone_templateObject2","DisabledColumn","Dropzone_templateObject3","Dropzone","currentPlayer","onClickColumn","isDisabled","columnsRef","useRef","ref","tabIndex","onClick","renderColumns","current","focus","Button","Button_templateObject","getCell","checkFrom","next","arr","players","cells","i","_next","_next2","curRow","curCol","push","every","x","checkVertical","r","c","checkHorizontal","checkDiagonalDown","checkDiagonalUp","ConnectFour","_useState","useState","_useState2","setCurrentPlayer","_useState3","_useState4","setColumns","_useState5","_useState6","winningCells","setWinningCells","Dropzone_Dropzone","length","nextColumns","column","toConsumableArray","find","findWinningCells","Board_Board","App","ConnectFour_ConnectFour","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2OAKaA,EAAgBC,MAHA,GAGqBC,KAAK,IAC1CC,GAAaC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EANF,WAOR,WADUC,OAAAC,EAAA,EAAAD,CAAAD,EALF,WAOR,WAFUA,64BCF1B,IAAMG,EAAOC,IAAOC,IAAVC,IDFmB,EACH,GCQpBC,EAAgBH,IAAOC,IAAVG,IAEL,SAAAC,GAAC,OAAIA,EAAEC,KACJ,SAAAD,GAAC,OAAIA,EAAEE,MAOlBC,EAAsBR,IAAOC,IAAVQ,IAEX,SAAAJ,GAAC,OAAIA,EAAEC,KACJ,SAAAD,GAAC,OAAIA,EAAEE,MAQlBG,EAAgBV,IAAOC,IAAVU,IAEL,SAAAN,GAAC,OAAIA,EAAEC,KACJ,SAAAD,GAAC,OAAIA,EAAEE,KACF,SAAAF,GAAC,OAAIA,EAAEO,cA6ChBC,EAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,iBAAZ,OACnBC,EAAAC,EAAAC,cAACpB,EAAD,KAvCON,MDxCiB,GCwCCC,KAAKD,MDzCH,GCyCwBC,KAAK,OAAO0B,IAAI,SAACd,EAAKe,GACvE,OAAOf,EAAIc,IAAI,SAACE,EAAGC,GACjB,OACEN,EAAAC,EAAAC,cAAChB,EAAD,CACEG,IAAKe,EAAW,EAChBd,IAAKgB,EAAW,EAChBC,IAAG,iBAAAC,OAAmBJ,EAAnB,KAAAI,OAA+BF,EAA/B,WAiBgB,SAACR,GAC5B,OAAOA,EAAQK,IAAI,SAACb,EAAKgB,GACvB,OAAOhB,EAAIa,IAAI,SAACM,EAAQL,GACtB,OACEJ,EAAAC,EAAAC,cAACT,EAAD,CACEJ,IDpEgB,ECoEEe,EAClBd,IAAKgB,EAAW,EAChBX,YAAajB,EAAc+B,GAC3BF,IAAG,iBAAAC,OAAmBJ,EAAnB,KAAAI,OAA+BF,EAA/B,WAURI,CAAqBZ,GA5BS,SAACC,GAClC,OAAOA,GAAoBA,EAAiBI,IAAI,SAAAQ,GAAA,IAAAC,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAA+B,EAAA,GAAGP,EAAHQ,EAAA,GAAaN,EAAbM,EAAA,UAC9CZ,EAAAC,EAAAC,cAACX,EAAD,CACEF,IDxDoB,ECwDFe,EAClBd,IAAKgB,EAAW,EAChBC,IAAG,uBAAAC,OAAyBJ,EAAzB,KAAAI,OAAqCF,EAArC,SAwBJQ,CAA2Bf,ovBCjFhC,IAAMgB,EAAUhC,IAAOC,IAAVgC,IFFgB,GEcvBC,EAASlC,IAAOmC,OAAVC,IAKW,SAAA/B,GAAC,OAAIA,EAAEO,aAKN,SAAAP,GAAC,OAAIA,EAAEO,cAIzByB,EAAiBrC,IAAOC,IAAVqC,KAwBPC,EAAW,SAAAX,GAIlB,IAHJY,EAGIZ,EAHJY,cACAC,EAEIb,EAFJa,cACAC,EACId,EADJc,WAEMC,EAAaC,iBAAO,MAO1B,OACE3B,EAAAC,EAAAC,cAACa,EAAD,CAASa,IAAKF,EAAYG,SAAS,MA7BjB,SAACN,EAAeC,EAAeC,GACnD,OAAOjD,MFrCoB,GEqCCC,KAAK,MAAM0B,IAAI,SAACE,EAAGC,GAC7C,OAAImB,EACKzB,EAAAC,EAAAC,cAACkB,EAAD,CAAgBb,IAAKD,IAI5BN,EAAAC,EAAAC,cAACe,EAAD,CACEtB,YAAajB,EAAc6C,GAC3BO,QAAS,kBAAMN,EAAclB,IAC7BC,IAAKD,MAoBNyB,CAAcR,EAPO,SAACjC,GACzBoC,EAAWM,QAAQC,QACnBT,EAAclC,IAKqCmC,wdClEhD,IAAMS,EAASnD,IAAOmC,OAAViB,KCqBbC,EAAU,SAACtC,EAAST,EAAKC,GAC7B,OAAOQ,EAAQR,IAAQQ,EAAQR,GAAKD,IAGhCgD,EAAY,SAACvC,EAAST,EAAKC,EAAKgD,GAIpC,IAHA,IAPeC,EAOTC,EAAU,GACVC,EAAQ,GAELC,EAAI,EAAGA,EJ3BY,EI2BQA,IAAK,KAAAC,EAChBL,EAAKjD,EAAKC,EAAKoD,GADCE,EAAAhE,OAAAiC,EAAA,EAAAjC,CAAA+D,EAAA,GAClCE,EADkCD,EAAA,GAC1BE,EAD0BF,EAAA,GAEvCJ,EAAQO,KAAKX,EAAQtC,EAAS+C,EAAQC,IACtCL,EAAMM,KAAK,CAACF,EAAQC,IAGtB,OAhBeP,EAgBCC,GAhBUQ,MAAM,SAAAC,GAAC,OAAIA,IAAMV,EAAI,MAgBnBE,GAGxBS,EAAgB,SAACpD,EAAST,EAAKC,GACnC,OAAO+C,EAAUvC,EAAST,EAAKC,EAAK,SAAC6D,EAAGC,EAAGV,GAAP,MAAa,CAACS,EAAIT,EAAGU,MAGrDC,EAAkB,SAACvD,EAAST,EAAKC,GACrC,OAAO+C,EAAUvC,EAAST,EAAKC,EAAK,SAAC6D,EAAGC,EAAGV,GAAP,MAAa,CAACS,EAAGC,EAAIV,MAGrDY,EAAoB,SAACxD,EAAST,EAAKC,GACvC,OAAO+C,EAAUvC,EAAST,EAAKC,EAAK,SAAC6D,EAAGC,EAAGV,GAAP,MAAa,CAACS,EAAIT,EAAGU,EAAIV,MAGzDa,EAAkB,SAACzD,EAAST,EAAKC,GACrC,OAAO+C,EAAUvC,EAAST,EAAKC,EAAK,SAAC6D,EAAGC,EAAGV,GAAP,MAAa,CAACS,EAAIT,EAAGU,EAAIV,MC9ClDc,EAAc,WAAM,IAAAC,EACaC,mBLRtB,YKOSC,EAAA/E,OAAAiC,EAAA,EAAAjC,CAAA6E,EAAA,GACvBlC,EADuBoC,EAAA,GACRC,EADQD,EAAA,GAAAE,EAECH,mBAASnF,GAFVuF,EAAAlF,OAAAiC,EAAA,EAAAjC,CAAAiF,EAAA,GAEvB/D,EAFuBgE,EAAA,GAEdC,EAFcD,EAAA,GAAAE,EAGWN,mBAAS,MAHpBO,EAAArF,OAAAiC,EAAA,EAAAjC,CAAAoF,EAAA,GAGvBE,EAHuBD,EAAA,GAGTE,EAHSF,EAAA,GA2B/B,OACEjE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkE,EAAD,CACE7C,cAAeA,EACfC,cA1BY,SAAClB,GACjB,GAAIR,EAAQQ,GAAU+D,OLVA,IKUwBH,EAAc,CAC1D,IAAMI,EAAcxE,EAAQK,IAAI,SAAAoE,GAAM,OAAA3F,OAAA4F,EAAA,EAAA5F,CAAQ2F,KAC9CD,EAAYhE,GAAUyC,KAAKxB,GAE3B,IAAM2C,EDfoB,SAACpE,GAC/B,IAAK,IAAIR,EAAM,EAAGA,EAAMQ,EAAQuE,OAAQ/E,IACtC,IAAK,IAAID,EAAM,EAAGA,EAAMS,EAAQR,GAAK+E,OAAQhF,IAAO,CAClD,IAAM6E,EAAe,CACnBhB,EAAcpD,EAAST,EAAKC,GAC5B+D,EAAgBvD,EAAST,EAAKC,GAC9BiE,EAAgBzD,EAAST,EAAKC,GAC9BgE,EAAkBxD,EAAST,EAAKC,IAChCmF,KAAK,SAAAhC,GAAK,OAAIA,IAEhB,GAAIyB,EACF,OAAOA,EAKb,OAAO,KCDkBQ,CAAiBJ,GACtCP,EAAWO,GAEPJ,EACFC,EAAgBD,GAEhBN,ELvBgB,aKuBCrC,ELtBD,WADA,cKuChBE,aAAcyC,IAEhBlE,EAAAC,EAAAC,cAACyE,EAAD,CACE7E,QAASA,EACTC,iBAAkBmE,IAEpBlE,EAAAC,EAAAC,cAACgC,EAAD,CAAQJ,QAjBM,WAChBiC,EAAWxF,GACXqF,EL9BoB,YK+BpBO,EAAgB,QAcd,cCtCSS,EAJH,kBACV5E,EAAAC,EAAAC,cAAC2E,EAAD,OCQIC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,sBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAA7E,OAAMsG,sBAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MC1C/BE","file":"static/js/main.c7f5fed6.chunk.js","sourcesContent":["export const PLAYER_1 = 'PLAYER_1'\nexport const PLAYER_2 = 'PLAYER_2'\nexport const BOARD_COLUMNS = 7\nexport const BOARD_ROWS = 6\nexport const WINNING_LENGTH = 4\nexport const EMPTY_COLUMNS = Array(BOARD_COLUMNS).fill([])\nexport const PLAYER_COLORS = {\n    [PLAYER_1]: '#ff636e',\n    [PLAYER_2]: '#ffca56'\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { PLAYER_COLORS, BOARD_ROWS, BOARD_COLUMNS } from '../constants'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 50px);\n  grid-template-rows: repeat(${BOARD_ROWS}, 50px);\n  grid-gap: 8px;\n`\n\nconst BoardGridItem = styled.div`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #6edfff;\n  border-radius: 50%;\n  z-index: 0;\n`\n\nconst HighlightedGridItem = styled.div`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #ebffff;\n  border-radius: 50%;\n  box-shadow: 0 0 6px 2px #ebffff55;\n  z-index: 2;\n`\n\nconst TokenGridItem = styled.div`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  background-color: ${p => p.playerColor};\n  border-radius: 50%;\n  overflow: hidden;\n  z-index: 1;\n`\n\nconst renderBoardGridItems = () => {\n  return Array(BOARD_ROWS).fill(Array(BOARD_COLUMNS).fill(null)).map((row, rowIndex) => {\n    return row.map((_, colIndex) => {\n      return (\n        <BoardGridItem\n          row={rowIndex + 1}\n          col={colIndex + 1}\n          key={`boardGridItem(${rowIndex},${colIndex})`}\n        />\n      )\n    })\n  })\n}\n\nconst renderHighlightedGridItems = (highlightedCells) => {\n  return highlightedCells && highlightedCells.map(([ rowIndex, colIndex ]) => (\n    <HighlightedGridItem\n      row={BOARD_ROWS - rowIndex}\n      col={colIndex + 1}\n      key={`highlightedGridItem(${rowIndex},${colIndex})`}\n    />\n  ))\n}\n\nconst renderTokenGridItems = (columns) => {\n  return columns.map((col, colIndex) => {\n    return col.map((player, rowIndex) => {\n      return (\n        <TokenGridItem\n          row={BOARD_ROWS - rowIndex}\n          col={colIndex + 1}\n          playerColor={PLAYER_COLORS[player]}\n          key={`tokenGridItem(${rowIndex},${colIndex})`}\n        />\n      )\n    })\n  })\n}\n\nexport const Board = ({ columns, highlightedCells }) => (\n  <Grid>\n    {renderBoardGridItems()}\n    {renderTokenGridItems(columns)}\n    {renderHighlightedGridItems(highlightedCells)}\n  </Grid>\n)\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { PLAYER_COLORS, BOARD_COLUMNS } from '../constants'\n\nconst Columns = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 50px);\n  grid-template-rows: 50px;\n  grid-gap: 8px;\n  margin-bottom: 8px;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Column = styled.button`\n  cursor: pointer;\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed ${p => p.playerColor};\n  box-sizing: border-box;\n\n  &:hover, &:focus {\n    outline: none;\n    background-color: ${p => p.playerColor};\n  }\n`\n\nconst DisabledColumn = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed #32464e;\n  box-sizing: border-box;\n`\n\nconst renderColumns = (currentPlayer, onClickColumn, isDisabled) => {\n  return Array(BOARD_COLUMNS).fill(null).map((_, colIndex) => {\n    if (isDisabled) {\n      return <DisabledColumn key={colIndex} />\n    }\n\n    return (\n      <Column\n        playerColor={PLAYER_COLORS[currentPlayer]}\n        onClick={() => onClickColumn(colIndex)}\n        key={colIndex}\n      />\n    )\n  })\n}\n\nexport const Dropzone = ({\n  currentPlayer,\n  onClickColumn,\n  isDisabled,\n}) => {\n  const columnsRef = useRef(null)\n\n  const handleColumnClick = (col) => {\n    columnsRef.current.focus();\n    onClickColumn(col)\n  }\n\n  return (\n    <Columns ref={columnsRef} tabIndex=\"-1\">\n      {renderColumns(currentPlayer, handleColumnClick, isDisabled)}\n    </Columns>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Button = styled.button`\n  font-family: 'Lato', sans-serif;\n  font-size: 18px;\n  padding: 8px;\n  margin: 12px 0;\n  width: 100%;\n  color: #4d6e7b;\n  border-radius: 5px;\n  outline: none;\n  background: transparent;\n  border: 2px solid transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    color: #243239;\n    background: #4d6e7b;\n  }\n\n  &:focus {\n    border-color: #4d6e7b; \n  }\n`\n","import { WINNING_LENGTH } from './constants'\n\nexport const findWinningCells = (columns) => {\n  for (let col = 0; col < columns.length; col++) {\n    for (let row = 0; row < columns[col].length; row++) {\n      const winningCells = [\n        checkVertical(columns, row, col),\n        checkHorizontal(columns, row, col),\n        checkDiagonalUp(columns, row, col),\n        checkDiagonalDown(columns, row, col),\n      ].find(cells => cells)\n\n      if (winningCells) {\n        return winningCells\n      }\n    }\n  }\n\n  return null\n}\n\nconst allEqual = arr => arr.every(x => x === arr[0])\n\nconst getCell = (columns, row, col) => {\n  return columns[col] && columns[col][row]\n}\n\nconst checkFrom = (columns, row, col, next) => {\n  const players = []\n  const cells = []\n\n  for (let i = 0; i < WINNING_LENGTH; i++) {\n    let [curRow, curCol] = next(row, col, i)\n    players.push(getCell(columns, curRow, curCol))\n    cells.push([curRow, curCol])\n  }\n\n  return allEqual(players) && cells\n}\n\nconst checkVertical = (columns, row, col) => {\n  return checkFrom(columns, row, col, (r, c, i) => [r + i, c])\n}\n\nconst checkHorizontal = (columns, row, col) => {\n  return checkFrom(columns, row, col, (r, c, i) => [r, c + i])\n}\n\nconst checkDiagonalDown = (columns, row, col) => {\n  return checkFrom(columns, row, col, (r, c, i) => [r - i, c + i])\n}\n\nconst checkDiagonalUp = (columns, row, col) => {\n  return checkFrom(columns, row, col, (r, c, i) => [r + i, c + i])\n}\n","import React, { useState } from 'react';\nimport { Board } from './Board'\nimport { Dropzone } from './Dropzone'\nimport { Button } from './Button'\nimport { PLAYER_1, PLAYER_2, BOARD_ROWS, EMPTY_COLUMNS } from '../constants'\nimport { findWinningCells } from '../utils'\n\nexport const ConnectFour = () => {\n  const [ currentPlayer, setCurrentPlayer ] = useState(PLAYER_1)\n  const [ columns, setColumns ] = useState(EMPTY_COLUMNS)\n  const [ winningCells, setWinningCells ] = useState(null)\n\n  const dropToken = (colIndex) => {\n    if (columns[colIndex].length < BOARD_ROWS && !winningCells) {\n      const nextColumns = columns.map(column => [...column])\n      nextColumns[colIndex].push(currentPlayer)\n\n      const winningCells = findWinningCells(nextColumns)\n      setColumns(nextColumns)\n\n      if (winningCells) {\n        setWinningCells(winningCells)\n      } else {\n        setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1)\n      }\n    }\n  }\n\n  const resetGame = () => {\n    setColumns(EMPTY_COLUMNS)\n    setCurrentPlayer(PLAYER_1)\n    setWinningCells(null)\n  }\n\n  return (\n    <div>\n      <Dropzone\n        currentPlayer={currentPlayer}\n        onClickColumn={dropToken}\n        isDisabled={!!winningCells}\n      />\n      <Board\n        columns={columns}\n        highlightedCells={winningCells}\n      />\n      <Button onClick={resetGame}>\n        New Game\n      </Button>\n    </div>\n  )\n}\n","import React from 'react';\nimport { ConnectFour } from './ConnectFour';\n\nconst App = () => (\n  <ConnectFour />\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}