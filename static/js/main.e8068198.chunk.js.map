{"version":3,"sources":["model/index.ts","constants.ts","components/Board/layout.ts","components/Board/Board.tsx","components/Dropzone/layout.ts","components/Dropzone/Dropzone.tsx","components/Button.tsx","utils.ts","components/ConnectFour.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["Player","WINNING_LENGTH","EMPTY_BOARD","Array","fill","BOARD_CELLS","flatMap","column","colIndex","map","_","rowIndex","row","col","PLAYER_COLORS","_PLAYER_COLORS","Object","defineProperty","One","Two","Grid","styled","div","_templateObject","BoardGridItem","_templateObject2","p","HighlightedGridItem","_templateObject3","TokenGridItem","_templateObject4","playerColor","Board","props","react_default","a","createElement","_ref","key","concat","tokens","tokenColumn","player","_ref2","highlightedCells","_ref3","renderHighlightedGridItems","Columns","layout_templateObject","ActiveColumn","button","layout_templateObject2","DisabledColumn","layout_templateObject3","Dropzone","currentPlayer","onClickColumn","isDisabled","columnsRef","useRef","ref","tabIndex","onClick","renderColumns","current","focus","Button","Button_templateObject","getPlayerAtCell","board","cell","checkWinnerFromCell","next","arr","players","cells","i","nextCell","push","every","val","checkVertical","root","inc","checkHorizontal","checkDiagonalDown","checkDiagonalUp","ConnectFour","_useState","useState","_useState2","slicedToArray","setCurrentPlayer","_useState3","_useState4","setTokens","_useState5","_useState6","winningCells","setWinningCells","Dropzone_Dropzone","length","nextTokens","toConsumableArray","find","findWinningCells","Board_Board","App","ConnectFour_ConnectFour","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8068198.chunk.js","sourcesContent":["export enum Player {\n  One = 1,\n  Two = 2,\n}\n\nexport interface Cell {\n  row: number;\n  col: number;\n}\n","import { Player, Cell } from './model'\n\nexport const BOARD_COLUMNS = 7\nexport const BOARD_ROWS = 6\nexport const WINNING_LENGTH = 4\n\nexport const EMPTY_BOARD: Player[][] = Array(BOARD_COLUMNS).fill([])\nexport const BOARD_CELLS: Cell[] =\n  Array(BOARD_COLUMNS).fill(Array(BOARD_ROWS).fill(null))\n    .flatMap((column: void[], colIndex: number) => {\n      return column.map((_:void, rowIndex: number) => {\n        return { row: rowIndex, col: colIndex }\n    })\n  })\n\nexport const PLAYER_COLORS: { [player: number]: string } = {\n  [Player.One]: '#ff636e',\n  [Player.Two]: '#ffca56',\n}\n","import styled from 'styled-components'\nimport { BOARD_ROWS, BOARD_COLUMNS } from '../../constants'\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 50px);\n  grid-template-rows: repeat(${BOARD_ROWS}, 50px);\n  grid-gap: 8px;\n`\n\nexport const BoardGridItem = styled.div<{ row: number, col: number }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #6edfff;\n  border-radius: 50%;\n  z-index: 0;\n`\n\nexport const HighlightedGridItem = styled.div<{ row: number, col: number }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #ebffff;\n  border-radius: 50%;\n  box-shadow: 0 0 6px 2px #ebffff55;\n  z-index: 2;\n`\n\nexport const TokenGridItem = styled.div<{ row: number, col: number, playerColor: string }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  background-color: ${p => p.playerColor};\n  border-radius: 50%;\n  overflow: hidden;\n  z-index: 1;\n`\n","import React from 'react'\nimport { Player, Cell } from '../../model'\nimport { PLAYER_COLORS, BOARD_ROWS, BOARD_CELLS } from '../../constants'\nimport { Grid, BoardGridItem, HighlightedGridItem, TokenGridItem } from './layout'\n\ninterface Props {\n  tokens: Player[][];\n  highlightedCells: Cell[] | null;\n}\n\nconst renderBoardGridItems = () => {\n  return BOARD_CELLS.map(({ row, col }) => (\n    <BoardGridItem\n      row={row + 1}\n      col={col + 1}\n      key={`boardGridItem(${row},${col})`}\n    />\n  ))\n}\n\nconst renderHighlightedGridItems = ({ highlightedCells }: Props) => {\n  return highlightedCells && highlightedCells.map(({ row, col }) => (\n    <HighlightedGridItem\n      row={BOARD_ROWS - row}\n      col={col + 1}\n      key={`highlightedGridItem(${row},${col})`}\n    />\n  ))\n}\n\nconst renderTokenGridItems = ({ tokens }: Props) => {\n  return tokens.map((tokenColumn, col) => {\n    return tokenColumn.map((player, row) => (\n      <TokenGridItem\n        row={BOARD_ROWS - row}\n        col={col + 1}\n        playerColor={PLAYER_COLORS[player]}\n        key={`tokenGridItem(${row},${col})`}\n      />\n    ))\n  })\n}\n\nexport const Board = (props: Props) => (\n  <Grid>\n    {renderBoardGridItems()}\n    {renderTokenGridItems(props)}\n    {renderHighlightedGridItems(props)}\n  </Grid>\n)\n","import styled from 'styled-components'\nimport { PLAYER_COLORS, BOARD_COLUMNS } from '../../constants'\n\nexport const Columns = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 50px);\n  grid-template-rows: 50px;\n  grid-gap: 8px;\n  margin-bottom: 8px;\n\n  &:focus {\n    outline: none;\n  }\n`\n\n\nexport const ActiveColumn = styled.button<{ playerColor: string }>`\n  cursor: pointer;\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed ${p => p.playerColor};\n  box-sizing: border-box;\n\n  &:hover, &:focus {\n    outline: none;\n    background-color: ${p => p.playerColor};\n  }\n`\n\nexport const DisabledColumn = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed #32464e;\n  box-sizing: border-box;\n`\n","import React, { useRef } from 'react'\nimport { Player } from '../../model'\nimport { PLAYER_COLORS, BOARD_COLUMNS } from '../../constants'\nimport { Columns, ActiveColumn, DisabledColumn } from './layout'\n\ninterface Props {\n  currentPlayer: Player;\n  onClickColumn: (index: number) => void;\n  isDisabled: boolean;\n}\n\nconst renderColumns = (currentPlayer: Player, onClickColumn: (colIndex: number) => void, isDisabled: boolean) => {\n  return Array(BOARD_COLUMNS).fill(null).map((_: void, col) => {\n    if (isDisabled) {\n      return <DisabledColumn key={col} />\n    }\n\n    return (\n      <ActiveColumn\n        playerColor={PLAYER_COLORS[currentPlayer]}\n        onClick={() => onClickColumn(col)}\n        key={col}\n      />\n    )\n  })\n}\n\nexport const Dropzone = ({ currentPlayer, onClickColumn, isDisabled }: Props) => {\n  const columnsRef = useRef<HTMLElement>(null)\n\n  const handleColumnClick = (col: number): void => {\n    if (columnsRef.current) {\n      columnsRef.current.focus()\n    }\n    \n    onClickColumn(col)\n  }\n\n  return (\n    <Columns ref={columnsRef as any} tabIndex={-1}>\n      {renderColumns(currentPlayer, handleColumnClick, isDisabled)}\n    </Columns>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Button = styled.button`\n  font-family: 'Lato', sans-serif;\n  font-size: 18px;\n  padding: 8px;\n  margin: 12px 0;\n  width: 100%;\n  color: #4d6e7b;\n  border-radius: 5px;\n  outline: none;\n  background: transparent;\n  border: 2px solid transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    color: #243239;\n    background: #4d6e7b;\n  }\n\n  &:focus {\n    border-color: #4d6e7b; \n  }\n`\n","import { Player, Cell } from './model'\nimport { WINNING_LENGTH } from './constants'\n\nexport function findWinningCells(board: Player[][]): Cell[] {\n  for (let col = 0; col < board.length; col++) {\n    for (let row = 0; row < board[col].length; row++) {\n      const winningCells = [\n        checkVertical(board, { row, col }),\n        checkHorizontal(board, { row, col }),\n        checkDiagonalUp(board, { row, col }),\n        checkDiagonalDown(board, { row, col }),\n      ].find(cells => cells && cells.length > 0)\n\n      if (winningCells) {\n        return winningCells\n      }\n    }\n  }\n\n  return []\n}\n\nfunction allEqual(arr: any[]): boolean {\n  return arr.every(val => val === arr[0])\n}\n\nfunction getPlayerAtCell(board: Player[][], cell: Cell): Player {\n  const { row, col } = cell\n  return board[col] && board[col][row]\n}\n\nfunction checkWinnerFromCell(board: Player[][], cell: Cell, next: (root: Cell, inc: number) => Cell ): Cell[] {\n  const players: Player[] = []\n  const cells: Cell[] = []\n\n  for (let i = 0; i < WINNING_LENGTH; i++) {\n    const nextCell = next(cell, i)\n    players.push(getPlayerAtCell(board, nextCell))\n    cells.push(nextCell)\n  }\n\n  return allEqual(players) ? cells : []\n}\n\nfunction checkVertical(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row + inc,\n    col: root.col,\n  }))\n}\n\nfunction checkHorizontal(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row,\n    col: root.col + inc,\n  }))\n}\n\nfunction checkDiagonalDown(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row - inc,\n    col: root.col + inc,\n  }))\n}\n\nfunction checkDiagonalUp(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row + inc,\n    col: root.col + inc,\n  }))\n}\n","import React, { useState } from 'react';\nimport { Board } from './Board'\nimport { Dropzone } from './Dropzone'\nimport { Button } from './Button'\nimport { Player, Cell } from '../model'\nimport { BOARD_ROWS, EMPTY_BOARD } from '../constants'\nimport { findWinningCells } from '../utils'\n\nexport const ConnectFour = () => {\n  const [ currentPlayer, setCurrentPlayer ] = useState<Player>(Player.One)\n  const [ tokens, setTokens ] = useState<Player[][]>(EMPTY_BOARD)\n  const [ winningCells, setWinningCells ] = useState<Cell[] | null>(null)\n\n  const dropToken = (colIndex: number) => {\n    if (tokens[colIndex].length < BOARD_ROWS && !winningCells) {\n      const nextTokens = tokens.map(tokenColumn => [...tokenColumn])\n      nextTokens[colIndex].push(currentPlayer)\n\n      const winningCells = findWinningCells(nextTokens)\n      setTokens(nextTokens)\n\n      if (winningCells.length > 0) {\n        setWinningCells(winningCells)\n      } else {\n        setCurrentPlayer(currentPlayer === Player.One ? Player.Two : Player.One)\n      }\n    }\n  }\n\n  const resetGame = () => {\n    setTokens(EMPTY_BOARD)\n    setCurrentPlayer(Player.One)\n    setWinningCells(null)\n  }\n\n  return (\n    <div>\n      <Dropzone\n        currentPlayer={currentPlayer}\n        onClickColumn={dropToken}\n        isDisabled={winningCells != null}\n      />\n      <Board\n        tokens={tokens}\n        highlightedCells={winningCells}\n      />\n      <Button onClick={resetGame}>\n        New Game\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { ConnectFour } from './ConnectFour'\n\nconst App = () => (\n  <ConnectFour />\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}