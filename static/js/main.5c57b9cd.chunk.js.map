{"version":3,"sources":["model/index.ts","constants.ts","components/Board/layout.ts","components/Board/Board.tsx","components/Dropzone/layout.ts","components/Dropzone/Dropzone.tsx","components/Button.tsx","utils/array.ts","utils/player.ts","utils/board.ts","ai/minimax.ts","components/ConnectFour.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["Player","BOARD_ROWS","WINNING_LENGTH","EMPTY_BOARD","Array","fill","BOARD_CELLS","flatMap","column","colIndex","map","_","rowIndex","row","col","MATCH_CELLS","c","reduce","result","r","match","push","i","PLAYER_COLORS","_PLAYER_COLORS","Object","defineProperty","One","Two","Grid","styled","div","_templateObject","BoardGridItem","_templateObject2","p","HighlightedGridItem","_templateObject3","TokenGridItem","_templateObject4","playerColor","Board","props","react_default","a","createElement","_ref","key","concat","tokens","tokenColumn","player","_ref2","highlightedCells","_ref3","renderHighlightedGridItems","Columns","layout_templateObject","ActiveColumn","button","layout_templateObject2","DisabledColumn","layout_templateObject3","Dropzone","currentPlayer","onClickColumn","isDisabled","columnsRef","useRef","ref","tabIndex","onClick","renderColumns","current","focus","Button","Button_templateObject","shuffle","arr","toConsumableArray","length","j","Math","floor","random","togglePlayer","getPlayerAtCell","board","cell","checkWinnerFromCell","next","players","cells","nextCell","every","val","checkVertical","root","inc","checkHorizontal","checkDiagonalDown","checkDiagonalUp","findWinningCells","winningCells","find","copyBoard","isFullBoard","validBoardMoves","ai_minimax","nextMove","bestScore","Number","MIN_SAFE_INTEGER","bestMove","forEach","nextBoard","score","minimax","isMaxPlayer","depth","arguments","undefined","alpha","beta","MAX_SAFE_INTEGER","isWinningBoard","maxPlayer","filledBoard","matchCells","minPlayer","includes","playerCount","filter","pow","scoreBoard","evaluate","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","max","min","err","return","ConnectFour","_useState","useState","_useState2","slicedToArray","setCurrentPlayer","_useState3","_useState4","setTokens","_useState5","_useState6","setWinningCells","_useState7","isPlayerOneHuman","_useState9","isPlayerTwoHuman","useEffect","isGameOver","shouldAiOneMove","shouldAiTwoMove","Minimax","dropToken","nextTokens","Dropzone_Dropzone","Board_Board","App","ConnectFour_ConnectFour","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c57b9cd.chunk.js","sourcesContent":["export enum Player {\n  One = 1,\n  Two = 2,\n}\n\nexport interface Cell {\n  row: number;\n  col: number;\n}\n","import { Player, Cell } from './model'\n\nexport const BOARD_COLUMNS = 7\nexport const BOARD_ROWS = 6\nexport const WINNING_LENGTH = 4\n\nexport const EMPTY_BOARD: Player[][] = Array(BOARD_COLUMNS).fill([])\n\nexport const BOARD_CELLS: Cell[] =\n  Array(BOARD_COLUMNS).fill(Array(BOARD_ROWS).fill(null))\n    .flatMap((column: void[], colIndex: number) => {\n      return column.map((_:void, rowIndex: number) => {\n        return { row: rowIndex, col: colIndex }\n    })\n  })\n\nexport const MATCH_CELLS: Cell[][] =\n  Array(BOARD_COLUMNS).fill(Array(BOARD_ROWS).fill(null))\n    .flatMap((column: any[], c: number) => {\n      return column.reduce((result: Cell[][], _:void, r: number) => {\n        const match = Array(WINNING_LENGTH).fill(null)\n\n        // Horizontal match\n        if (c <= BOARD_COLUMNS - WINNING_LENGTH) {\n          result.push(match.map((_, i) => ({ row: r, col: c + i })))\n        }\n\n        // Vertical match\n        if (r <= BOARD_ROWS - WINNING_LENGTH) {\n          result.push(match.map((_, i) => ({ row: r + i, col: c })))\n        }\n\n        // Diagonal (positive slope) match\n        if ((c <= BOARD_COLUMNS - WINNING_LENGTH) && (r <= BOARD_ROWS - WINNING_LENGTH)) {\n          result.push(match.map((_, i) => ({ row: r + i, col: c + i })))\n        }\n\n        // Diagonal (negative slope) match\n        if ((c <= BOARD_COLUMNS - WINNING_LENGTH) && (r >= WINNING_LENGTH - 1)) {\n          result.push(match.map((_, i) => ({ row: r - i, col: c + i })))\n        }\n\n        return result\n      }, [])\n    })\n\nexport const PLAYER_COLORS: { [player: number]: string } = {\n  [Player.One]: '#ff636e',\n  [Player.Two]: '#ffca56',\n}\n","import styled from 'styled-components'\nimport { BOARD_ROWS, BOARD_COLUMNS } from '../../constants'\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 55px);\n  grid-template-rows: repeat(${BOARD_ROWS}, 55px);\n  grid-gap: 8px;\n\n  @media (max-width: 600px) {\n    grid-template-columns: repeat(${BOARD_COLUMNS}, 40px);\n    grid-template-rows: repeat(${BOARD_ROWS}, 40px);\n  }\n`\n\nexport const BoardGridItem = styled.div<{ row: number, col: number }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #6edfff;\n  border-radius: 50%;\n  z-index: 0;\n`\n\nexport const HighlightedGridItem = styled.div<{ row: number, col: number }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  box-sizing: border-box;\n  border: 3px solid #ebffff;\n  border-radius: 50%;\n  box-shadow: 0 0 6px 2px #ebffff55;\n  z-index: 2;\n`\n\nexport const TokenGridItem = styled.div<{ row: number, col: number, playerColor: string }>`\n  position: relative;\n  grid-row: ${p => p.row};\n  grid-column: ${p => p.col};\n  background-color: ${p => p.playerColor};\n  border-radius: 50%;\n  overflow: hidden;\n  z-index: 1;\n`\n","import React from 'react'\nimport { Player, Cell } from '../../model'\nimport { PLAYER_COLORS, BOARD_ROWS, BOARD_CELLS } from '../../constants'\nimport { Grid, BoardGridItem, HighlightedGridItem, TokenGridItem } from './layout'\n\ninterface Props {\n  tokens: Player[][];\n  highlightedCells: Cell[] | null;\n}\n\nconst renderBoardGridItems = () => {\n  return BOARD_CELLS.map(({ row, col }) => (\n    <BoardGridItem\n      row={row + 1}\n      col={col + 1}\n      key={`boardGridItem(${row},${col})`}\n    />\n  ))\n}\n\nconst renderHighlightedGridItems = ({ highlightedCells }: Props) => {\n  return highlightedCells && highlightedCells.map(({ row, col }) => (\n    <HighlightedGridItem\n      row={BOARD_ROWS - row}\n      col={col + 1}\n      key={`highlightedGridItem(${row},${col})`}\n    />\n  ))\n}\n\nconst renderTokenGridItems = ({ tokens }: Props) => {\n  return tokens.map((tokenColumn, col) => {\n    return tokenColumn.map((player, row) => (\n      <TokenGridItem\n        row={BOARD_ROWS - row}\n        col={col + 1}\n        playerColor={PLAYER_COLORS[player]}\n        key={`tokenGridItem(${row},${col})`}\n      />\n    ))\n  })\n}\n\nexport const Board = (props: Props) => (\n  <Grid>\n    {renderBoardGridItems()}\n    {renderTokenGridItems(props)}\n    {renderHighlightedGridItems(props)}\n  </Grid>\n)\n","import styled from 'styled-components'\nimport { PLAYER_COLORS, BOARD_COLUMNS } from '../../constants'\n\nexport const Columns = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${BOARD_COLUMNS}, 55px);\n  grid-template-rows: 55px;\n  grid-gap: 8px;\n  margin-bottom: 8px;\n\n  @media (max-width: 600px) {\n    grid-template-columns: repeat(${BOARD_COLUMNS}, 40px);\n    grid-template-rows: 40px;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`\n\nexport const ActiveColumn = styled.button<{ playerColor: string }>`\n  cursor: pointer;\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed ${p => p.playerColor};\n  box-sizing: border-box;\n\n  &:hover, &:focus {\n    outline: none;\n    background-color: ${p => p.playerColor};\n  }\n`\n\nexport const DisabledColumn = styled.div`\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: transparent;\n  border: 3px dashed #32464e;\n  box-sizing: border-box;\n`\n","import React, { useRef } from 'react'\nimport { Player } from '../../model'\nimport { PLAYER_COLORS, BOARD_COLUMNS } from '../../constants'\nimport { Columns, ActiveColumn, DisabledColumn } from './layout'\n\ninterface Props {\n  currentPlayer: Player;\n  onClickColumn: (index: number) => void;\n  isDisabled: boolean;\n}\n\nconst renderColumns = (currentPlayer: Player, onClickColumn: (colIndex: number) => void, isDisabled: boolean) => {\n  return Array(BOARD_COLUMNS).fill(null).map((_: void, col) => {\n    if (isDisabled) {\n      return <DisabledColumn key={col} />\n    }\n\n    return (\n      <ActiveColumn\n        playerColor={PLAYER_COLORS[currentPlayer]}\n        onClick={() => onClickColumn(col)}\n        key={col}\n      />\n    )\n  })\n}\n\nexport const Dropzone = ({ currentPlayer, onClickColumn, isDisabled }: Props) => {\n  const columnsRef = useRef<HTMLElement>(null)\n\n  const handleColumnClick = (col: number): void => {\n    if (columnsRef.current) {\n      columnsRef.current.focus()\n    }\n    \n    onClickColumn(col)\n  }\n\n  return (\n    <Columns ref={columnsRef as any} tabIndex={-1}>\n      {renderColumns(currentPlayer, handleColumnClick, isDisabled)}\n    </Columns>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Button = styled.button`\n  font-family: 'Lato', sans-serif;\n  font-size: 18px;\n  padding: 8px;\n  margin: 12px 0;\n  width: 100%;\n  color: #4d6e7b;\n  border-radius: 5px;\n  outline: none;\n  background: transparent;\n  border: 2px solid transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    color: #243239;\n    background: #4d6e7b;\n  }\n\n  &:focus {\n    border-color: #4d6e7b; \n  }\n`\n","export function shuffle(arr: any[]): any[] {\n  const result = [...arr]\n\n  for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [result[i], result[j]] = [result[j], result[i]];\n  }\n\n  return result;\n}\n","import { Player } from '../model'\n\nexport function togglePlayer(player: Player): Player {\n  return player === Player.One ? Player.Two : Player.One\n}\n","import { Player, Cell } from '../model'\nimport { BOARD_ROWS, MATCH_CELLS, WINNING_LENGTH } from '../constants'\nimport { togglePlayer } from './player';\n\nfunction allEqual(arr: any[]): boolean {\n  return arr.every(val => val === arr[0])\n}\n\nfunction getPlayerAtCell(board: Player[][], cell: Cell): Player {\n  const { row, col } = cell\n  return board[col] && board[col][row]\n}\n\nfunction checkWinnerFromCell(board: Player[][], cell: Cell, next: (root: Cell, inc: number) => Cell ): Cell[] {\n  const players: Player[] = []\n  const cells: Cell[] = []\n\n  for (let i = 0; i < WINNING_LENGTH; i++) {\n    const nextCell = next(cell, i)\n    players.push(getPlayerAtCell(board, nextCell))\n    cells.push(nextCell)\n  }\n\n  return allEqual(players) ? cells : []\n}\n\nfunction checkVertical(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row + inc,\n    col: root.col,\n  }))\n}\n\nfunction checkHorizontal(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row,\n    col: root.col + inc,\n  }))\n}\n\nfunction checkDiagonalDown(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row - inc,\n    col: root.col + inc,\n  }))\n}\n\nfunction checkDiagonalUp(board: Player[][], cell: Cell): Cell[] {\n  return checkWinnerFromCell(board, cell, (root, inc) => ({\n    row: root.row + inc,\n    col: root.col + inc,\n  }))\n}\n\nexport function findWinningCells(board: Player[][], player?: Player): Cell[] {\n  for (let col = 0; col < board.length; col++) {\n    for (let row = 0; row < board[col].length; row++) {\n      const cell = { row, col }\n      const winningCells = [\n        checkVertical(board, cell),\n        checkHorizontal(board, cell),\n        checkDiagonalUp(board, cell),\n        checkDiagonalDown(board, cell),\n      ].find(cells => cells && cells.length > 0)\n\n      if (winningCells) {\n        if (!player ||  player === getPlayerAtCell(board, cell)) {\n          return winningCells\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nexport function copyBoard(board: Player[][]): Player[][] {\n  return board.map(tokenColumn => [...tokenColumn])\n}\n\nexport function isWinningBoard(board: Player[][], player?: Player): boolean {\n  return findWinningCells(board, player).length > 0\n}\n\nexport function isFullBoard(board: Player[][]): boolean {\n  return board.every(tokenColumn => {\n    return tokenColumn.length === BOARD_ROWS\n  })\n}\n\nexport function validBoardMoves(board: Player[][]): number[] {\n  return board.reduce((result, tokenColumn, i) => {\n    if (tokenColumn.length < BOARD_ROWS) {\n      result.push(i)\n    }\n    \n    return result\n  }, [])\n}\n\nexport function scoreBoard(board: Player[][], maxPlayer: Player): number {\n  const filledBoard: (Player | null)[][] = board.map(tokenColumn => {\n    return [...tokenColumn, ...Array(BOARD_ROWS - tokenColumn.length).fill(null)]\n  })\n\n  let result = 0\n\n  MATCH_CELLS.forEach(matchCells => {\n    const match = matchCells.map(cell => filledBoard[cell.col][cell.row])\n    const minPlayer = togglePlayer(maxPlayer)\n\n    if (!match.includes(minPlayer)) {\n      const playerCount = match.filter(p => p === maxPlayer).length\n      result += 16 ** playerCount\n    }\n    \n    if (!match.includes(maxPlayer)) {\n      const playerCount = match.filter(p => p === minPlayer).length\n      result -= 16 ** playerCount\n    }\n  })\n\n  return result\n}\n","import { Player } from '../model'\nimport { copyBoard, isFullBoard, isWinningBoard, scoreBoard, shuffle, togglePlayer, validBoardMoves } from '../utils'\n\nfunction nextMove(board: Player[][], player: Player): number {\n  let bestScore = Number.MIN_SAFE_INTEGER\n  let bestMove = 0\n\n  shuffle(validBoardMoves(board)).forEach(col => {\n    const nextBoard = copyBoard(board)\n    nextBoard[col].push(player)\n\n    const score = minimax(nextBoard, togglePlayer(player), false)\n\n    if (score > bestScore) {\n      bestScore = score\n      bestMove = col\n    }\n  })\n\n  return bestMove\n}\n\nfunction minimax(\n  board: Player[][],\n  player: Player,\n  isMaxPlayer: boolean,\n  depth: number = 5,\n  alpha: number = Number.MIN_SAFE_INTEGER,\n  beta: number = Number.MAX_SAFE_INTEGER,\n): number {\n  if (isFullBoard(board) || isWinningBoard(board) || depth < 1) {\n    return evaluate(board, player, isMaxPlayer)\n  }\n\n  let bestScore = isMaxPlayer ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER\n\n  for (let col of shuffle(validBoardMoves(board))) {\n    let nextBoard = copyBoard(board)\n    nextBoard[col].push(player)\n    let score = minimax(nextBoard, togglePlayer(player), !isMaxPlayer, depth - 1, alpha, beta)\n    bestScore = isMaxPlayer ? Math.max(bestScore, score) : Math.min(bestScore, score)\n\n    if (isMaxPlayer) {\n      alpha = Math.max(alpha, score)\n    } else {\n      beta = Math.min(beta, score)\n    }\n\n    if (beta <= alpha) {\n      break\n    }\n  }\n\n  return bestScore\n}\n\nfunction evaluate(board: Player[][], player: Player, isMaxPlayer: boolean): number {\n  const maxPlayer = isMaxPlayer ? player : togglePlayer(player)\n  return scoreBoard(board, maxPlayer)\n}\n\nexport default { nextMove }\n","import React, { useState, useEffect } from 'react';\nimport { Board } from './Board'\nimport { Dropzone } from './Dropzone'\nimport { Button } from './Button'\nimport { Player, Cell } from '../model'\nimport { BOARD_ROWS, EMPTY_BOARD } from '../constants'\nimport { copyBoard, isFullBoard, togglePlayer, findWinningCells } from '../utils'\nimport { Minimax } from '../ai'\n\nexport const ConnectFour = () => {\n  const [ currentPlayer, setCurrentPlayer ] = useState<Player>(Player.One)\n  const [ tokens, setTokens ] = useState<Player[][]>(EMPTY_BOARD)\n  const [ winningCells, setWinningCells ] = useState<Cell[] | null>(null)\n  const [ isPlayerOneHuman ] = useState<boolean>(true)\n  const [ isPlayerTwoHuman ] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (!isGameOver()) {\n      const shouldAiOneMove = currentPlayer === Player.One && !isPlayerOneHuman\n      const shouldAiTwoMove = currentPlayer === Player.Two && !isPlayerTwoHuman\n      \n      if (shouldAiOneMove || shouldAiTwoMove) {\n        const col = Minimax.nextMove(tokens, currentPlayer)\n        dropToken(col);\n      }\n    }\n  }, [tokens]);\n\n  const dropToken = (colIndex: number) => {\n    if (tokens[colIndex].length < BOARD_ROWS && !winningCells) {\n      const nextTokens = copyBoard(tokens)\n      nextTokens[colIndex].push(currentPlayer)\n\n      const winningCells = findWinningCells(nextTokens)\n      setTokens(nextTokens)\n\n      if (winningCells.length > 0) {\n        setWinningCells(winningCells)\n      } else {\n        setCurrentPlayer(togglePlayer(currentPlayer))\n      }\n    }\n  }\n\n  const resetGame = () => {\n    setTokens(EMPTY_BOARD)\n    setCurrentPlayer(Player.One)\n    setWinningCells(null)\n  }\n\n  const isGameOver = () => {\n    return (winningCells != null) || isFullBoard(tokens)\n  }\n\n  return (\n    <div>\n      <Dropzone\n        currentPlayer={currentPlayer}\n        onClickColumn={dropToken}\n        isDisabled={isGameOver()}\n      />\n      <Board\n        tokens={tokens}\n        highlightedCells={winningCells}\n      />\n      <Button onClick={resetGame}>\n        New Game\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { ConnectFour } from './ConnectFour'\n\nconst App = () => (\n  <ConnectFour />\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}